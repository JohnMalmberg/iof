# Copyright (C) 2016 Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted for any purpose (including commercial purposes)
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the
#    documentation and/or materials provided with the distribution.
#
# 3. In addition, redistributions of modified forms of the source or binary
#    code must carry prominent notices stating that the original code was
#    changed and the date of the change.
#
#  4. All publications or advertising materials mentioning features or use of
#     this software are asked, but not required, to acknowledge that it was
#     developed by Intel Corporation and credit the contributors.
#
# 5. Neither the name of Intel Corporation, nor the name of any Contributor
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""Unit tests"""
import os

TEST_SRC = ['utest_gah.c']

def scons():
    """Scons function"""

    Import('env')
    # Run config in a new environment so the environment isn't polluted
    # causing tests to be rebuilt when utest target is used
    config_env = env.Clone()
    config = Configure(config_env)
    if not config.CheckHeader('CUnit/Basic.h') or \
       not config.CheckLib('cunit'):
        print "\n*****************************************************"
        print "CUnit packages must be installed to enable unit tests"
        print "*****************************************************\n"
        # Just returning is the desired behavior here.  The utest target
        # has yet to be defined so the build will just fail.
        config.Finish()
        return
    config.Finish()

    test_env = env.Clone()
    test_env.AppendUnique(LIBS=['cunit'])
    test_env.AppendUnique(CPPPATH=['../common/include'])
    tests = []
    for test in TEST_SRC:
        tests.append(test_env.Program([test, '../common/ios_gah.o']))

    Default(tests)

    # Run tests in a new environment so a rebuilt of the tests isn't triggered
    # by changes to the environment
    run_env = test_env.Clone()

    run_tests = run_env.RunTests(tests)

    run_env.Alias('utest', run_tests)

    AlwaysBuild(run_tests)

if __name__ == "SCons.Script":
    scons()
