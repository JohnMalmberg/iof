# Copyright (C) 2016 Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted for any purpose (including commercial purposes)
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions, and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions, and the following disclaimer in the
#    documentation and/or materials provided with the distribution.
#
# 3. In addition, redistributions of modified forms of the source or binary
#    code must carry prominent notices stating that the original code was
#    changed and the date of the change.
#
#  4. All publications or advertising materials mentioning features or use of
#     this software are asked, but not required, to acknowledge that it was
#     developed by Intel Corporation and credit the contributors.
#
# 5. Neither the name of Intel Corporation, nor the name of any Contributor
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""Build ping test"""
import os

HEADERS = ['cnss_plugin.h']
COMMON_SRC = ['version.c', 'ios_gah.c', 'log.c']
CNSS_SRC = ['cnss.c', 'iof_main.c', 'ctrl_common.c', 'ctrl_fs.c']

def scons():
    """Scons function"""

    Import('env prereqs')

    # Set options which are used throughout the src.
    tenv = env.Clone()
    tenv.Append(CFLAGS=['-pthread'])
    tenv.Append(CPPDEFINES=['_FILE_OFFSET_BITS=64', '_GNU_SOURCE'])
    tenv.Append(CPPPATH=['common/include'])
    tenv.Append(CPPPATH=['include'])
    tenv.Append(LIBS='pthread')

    prereqs.require(tenv, 'cart')

    # Build a static library of the common parts.
    common = []
    for src in COMMON_SRC:
        common += tenv.Object(os.path.join('common', src))

    # Now build the CNSS application
    cenv = tenv.Clone()

    # Set the define in SConscript so that it's in place for the prereqs.require
    # check which will verify fuse3/fuse.h can be loaded.
    cenv.Append(CPPFLAGS=['-DFUSE_USE_VERSION=30'])

    if env.get('PLATFORM') != 'darwin':
        cenv.Append(LIBS='dl')

    if cenv.get('fuse3'):
        prereqs.require(cenv, 'fuse')
        cenv.Append(CPPDEFINES=['IOF_USE_FUSE3=1'])
    else:
        if env.get('PLATFORM') == 'darwin':
            cenv.Append(CPPPATH=['/usr/local/include/osxfuse'],
                        LIBS=['osxfuse'])
        else:
            cenv.Append(LIBS=['fuse'])

    cnss_obj = []
    for src in CNSS_SRC:
        cnss_obj += cenv.Object(os.path.join('cnss', src))
    progs = cenv.Program('cnss/cnss', common + cnss_obj)

    # Build the IONSS application
    ienv = tenv.Clone()
    progs += ienv.Program(['ionss/ionss.c', common])

    Default(progs)


    tenv.Install(os.path.join("$PREFIX", 'bin'), progs)

    for header in HEADERS:
        tenv.Install(os.path.join("$PREFIX", 'include'), 'include/%s' % header)


    SConscript('utest/SConscript')

if __name__ == "SCons.Script":
    scons()
