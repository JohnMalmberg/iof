"""Build ping test"""
import os

HEADERS = ['iof_plugin.h']
COMMON_SRC = ['version.c', 'ios_gah.c', 'log.c', 'iof_common.c']
CNSS_SRC = ['cnss.c', 'iof_main.c']

def scons():
    """Scons function"""

    Import('env prereqs')

    # Set options which are used throughout the src.
    tenv = env.Clone()
    tenv.Append(CFLAGS='-pthread')
    tenv.Append(CPPDEFINES=['_FILE_OFFSET_BITS=64'])
    tenv.Append(CPPPATH=['common/include'])
    tenv.Append(CPPPATH=['include'])
    tenv.Append(LIBS='pthread')

    prereqs.require(tenv, 'mercury', 'mcl')

    # Build a static library of the common parts.
    common = []
    for src in COMMON_SRC:
        common += tenv.Object(os.path.join('common', src))

    # Now build the CNSS application
    cenv = tenv.Clone()

    # Set the define in SConscript so that it's in place for the prereqs.require
    # check which will verify fuse3/fuse.h can be loaded.
    cenv.Append(CPPFLAGS=['-DFUSE_USE_VERSION=30'])

    if env.get('PLATFORM') != 'darwin':
        cenv.Append(LIBS='dl')

    if cenv.get('fuse3'):
        prereqs.require(cenv, 'fuse')
        cenv.Append(CPPDEFINES=['IOF_USE_FUSE3=1'])
    else:
        if env.get('PLATFORM') == 'darwin':
            cenv.Append(CPPPATH=['/usr/local/include/osxfuse'],
                        LIBS=['osxfuse'])
        else:
            cenv.Append(LIBS=['fuse'])

    cnss_obj = []
    for src in CNSS_SRC:
        cnss_obj += cenv.Object(os.path.join('cnss', src))
    progs = cenv.Program('cnss/cnss', common + cnss_obj)

    # Build the IONSS application
    ienv = tenv.Clone()
    progs += ienv.Program(['ionss/ionss.c', common])

    Default(progs)

    # Build tester
    test_targets = tenv.SharedObject('test/iof_test_log')

    Default(test_targets)

    tenv.Install(os.path.join("$PREFIX", 'bin'), progs)

    for header in HEADERS:
        tenv.Install(os.path.join("$PREFIX", 'include'), 'include/%s' % header)

    Export('test_targets')

    SConscript('utest/SConscript')

if __name__ == "SCons.Script":
    scons()
